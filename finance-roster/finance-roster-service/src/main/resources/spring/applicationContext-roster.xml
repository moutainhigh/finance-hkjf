<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:jaxws="http://cxf.apache.org/jaxws"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
	   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
       http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.1.xsd
       http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd">

    <context:property-placeholder location="classpath*:application.properties,classpath*:env_common.properties,classpath*:application-redis.properties" ignore-unresolvable="true" order="1"
                                  file-encoding="UTF-8"/>

    <!-- 引入框架的配置信息 -->
    <import resource="classpath:applicationContext-framework.xml"/>
    <!-- 启用注解 -->
    <context:annotation-config/>
    <!--import dubbo config-->
    <import resource="classpath:spring/applicationContext-dubbo-provider.xml"/>
    <!-- 扫描包 -->
    <context:component-scan base-package="com.hongkun.finance.roster"/>

    <!--配置reids缓存（使用注解式缓存）-->
    <context:component-scan base-package="com.yirun.framework.redis.annotation"/>
    <context:component-scan base-package="com.yirun.framework.redis.aop.aspectj"/>
    <!--开启代理 -->
    <aop:aspectj-autoproxy proxy-target-class="true" expose-proxy="true"/>


    <!-- 创建数据源 -->
    <bean id="defaultDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close">
        <!-- 基本属性 url、username、password -->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1"/>
        <property name="minIdle" value="1"/>
        <property name="maxActive" value="20"/>

        <!-- 配置获取连接等待超时的时间，单位是毫秒 -->
        <property name="maxWait" value="60000"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>

        <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
        <property name="filters" value="stat"/>
    </bean>

    <!--开启基于注解的事务-->
    <tx:annotation-driven transaction-manager="frameworkTransactionManager"/>

    <bean id="dataSource" class="com.yirun.framework.dao.datasource.DynamicDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry key="demo" value-ref="defaultDataSource"/>
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="defaultDataSource"/>
    </bean>
</beans>