<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jee="http://www.springframework.org/schema/jee" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:jaxws="http://cxf.apache.org/jaxws" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
	   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
       http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.1.xsd
       http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd">

	<!-- 引入框架的配置信息 -->
	<import resource="classpath:applicationContext-framework.xml" />
	<!-- 引入框架的配置信息-jms -->
	<import resource="classpath:applicationContext-jms.xml" />
	<import resource="applicationContext-dubbo-provider.xml" />
	<!-- 引入框架的配置信息-redis -->
	<!-- <import resource="classpath:applicationContext-redis.xml" /> -->

 	<!-- applicationContext工具类 -->
    <!-- <bean id="applicationContextUtils" class="com.yirun.framework.core.utils.ApplicationContextUtils"/> -->
	
	<!-- 启用注解 -->
	<context:annotation-config />

	<!-- 扫描包 -->
	<context:component-scan base-package="com.hongkun.finance.user" />
	<context:component-scan base-package="com.hongkun.finance.sms" />
	<context:component-scan base-package="com.hongkun.finance.loan" />
	<context:component-scan base-package="com.hongkun.finance.contract" />
	<context:component-scan base-package="com.hongkun.finance.qdz" />
	<context:component-scan base-package="com.hongkun.finance.roster" />
	<context:component-scan base-package="com.hongkun.finance.point" />
 	<context:component-scan base-package="com.hongkun.finance.invest" />
	<context:component-scan base-package="com.hongkun.finance.payment" />
	<context:component-scan base-package="com.hongkun.finance.info" />
	<context:component-scan base-package="com.hongkun.finance.vas" />
	<context:component-scan base-package="com.hongkun.finance.property" />
	<context:component-scan base-package="com.hongkun.finance.monitor" />
	<context:component-scan base-package="com.hongkun.finance.bi" />
	<context:component-scan base-package="com.hongkun.finance.fund" />
	<context:component-scan base-package="com.hongkun.finance.activity" />

	<!--配置reids缓存（使用注解式缓存）-->
	<context:component-scan base-package="com.yirun.framework.redis.annotation"/>
	<context:component-scan base-package="com.yirun.framework.redis.aop.aspectj"/>
	<!--开启代理 -->
	<aop:aspectj-autoproxy proxy-target-class="true" expose-proxy="true"/>

	<context:property-placeholder location="classpath*:*.properties" ignore-unresolvable="true" order="1" file-encoding="UTF-8" />

	<!--使用spring注解方法读取properties文件中值 -->
	<bean id="propertiesReader"
		  class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>classpath:application.properties</value>
			</list>
		</property>
	</bean>


	<!-- 创建数据源 -->
	<bean id="defaultDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性 url、username、password -->
		  <!--<property name="url" value="jdbc:mysql://192.168.1.250:3306/finance?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=round" />-->
		 <property name="url" value="jdbc:mysql://10.112.12.203:3306/finance_hkjf?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=round" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
        
        <!--<property name="url" value="jdbc:mysql://10.112.12.203:3521/finance_hkjf?zeroDateTimeBehavior=convertToNull&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior\=round" />-->
        <!--<property name="username" value="finance_hkjf" />-->
        <!--<property name="password" value="qibBkZrhyT0Aaf1z" />-->

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />

		<!-- 配置获取连接等待超时的时间，单位是毫秒 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

		<!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
		<property name="filters" value="stat" />
	</bean>

	<bean id="dataSource" class="com.yirun.framework.dao.datasource.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="demo" value-ref="defaultDataSource" />
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="defaultDataSource" />
	</bean>
	
	
	<!-- 引入TCC事务  -->
	<import resource="classpath:tcc-transaction-dubbo.xml" />
	<import resource="classpath:tcc-transaction.xml" />
	
	<!-- 替换默认的TCC异常调度配置 -->
	<!-- <bean id="defaultRecoverConfig" class="org.mengyun.tcctransaction.spring.recover.DefaultRecoverConfig">
        <property name="cronExpression" value="0 0 */1 * * ?"/>
    </bean> -->

    <!-- tcc事务reids cluster -->
    <bean id="transactionRepository" class="org.mengyun.tcctransaction.repository.RedisClusterTransactionRepository">
        <property name="keyPrefix" value="TCC:IDE:"/>
        <property name="jedisClusterExtend" ref="jedisClusterExtend"/>
    </bean>
    
    <bean id="jedisClusterExtend" class="org.mengyun.tcctransaction.repository.helper.JedisClusterExtend">
        <constructor-arg index="0" value="10.112.12.203:7000,10.112.12.203:7001,10.112.12.203:7002" type="java.lang.String"/>
        <constructor-arg index="1" ref="jedisPoolConfig"/>
    </bean>

    <!-- 配置JedisPoolConfig实例 -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.pool.maxIdle}" />
        <property name="maxTotal" value="${redis.pool.maxActive}" />
        <property name="maxWaitMillis" value="${redis.pool.maxWait}" />
        <property name="testOnBorrow" value="false" />
    </bean>
    
    
	<!-- tcc事务 redis 单实例 -->
	<!--<bean id="transactionRepository" class="org.mengyun.tcctransaction.repository.RedisTransactionRepository">
        <property name="jedisPool" ref="jedisPool"/>
        <property name="keyPrefix" value="TCC:ide_:"/>
    </bean>
    
    &lt;!&ndash; redis 配置,也可以把配置挪到properties配置文件中,再读取 &ndash;&gt;
	<bean id="jedisPool" class="redis.clients.jedis.JedisPool">
		<constructor-arg index="0" ref="jedisPoolConfig" />
		<constructor-arg index="1" value="192.168.1.250" name="host" type="java.lang.String" />
		<constructor-arg index="2" value="6381" name="port" type="int" />
		<constructor-arg index="3" value="5000" name="timeout" type="int" />
        &lt;!&ndash; <constructor-arg index="4" value="yrSuper001" name="password" type="java.lang.String" /> &ndash;&gt;
	</bean> 
	
	&lt;!&ndash; 配置JedisPoolConfig实例 &ndash;&gt;  
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">  
        <property name="maxIdle" value="${redis.pool.maxIdle}" />  
        <property name="maxTotal" value="${redis.pool.maxActive}" />  
        <property name="maxWaitMillis" value="${redis.pool.maxWait}" />  
        <property name="testOnBorrow" value="false" />  
    </bean>-->
	
	<!-- <bean id="transactionRepository" class="org.mengyun.tcctransaction.spring.repository.SpringJdbcTransactionRepository">
        <property name="dataSource" ref="tccDataSource"/>
        <property name="tbSuffix" value="_ide"/>
    </bean> -->
	<!-- 创建数据源 -->
	<!-- <bean id="tccDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		基本属性 url、username、password
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		配置初始化大小、最小、最大
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />

		配置获取连接等待超时的时间，单位是毫秒
		<property name="maxWait" value="60000" />

		配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		配置一个连接在池中最小生存的时间，单位是毫秒
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		打开PSCache，并且指定每个连接上PSCache的大小
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

		配置监控统计拦截的filters，去掉后监控界面sql无法统计
		<property name="filters" value="stat" />
	</bean> -->
</beans>